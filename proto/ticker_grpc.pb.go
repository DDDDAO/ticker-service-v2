// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: proto/ticker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TickerService_GetTicker_FullMethodName       = "/ticker.TickerService/GetTicker"
	TickerService_GetBatchTickers_FullMethodName = "/ticker.TickerService/GetBatchTickers"
	TickerService_StreamTickers_FullMethodName   = "/ticker.TickerService/StreamTickers"
	TickerService_HealthCheck_FullMethodName     = "/ticker.TickerService/HealthCheck"
)

// TickerServiceClient is the client API for TickerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerServiceClient interface {
	// Get single ticker
	GetTicker(ctx context.Context, in *GetTickerRequest, opts ...grpc.CallOption) (*TickerData, error)
	// Get multiple tickers in batch
	GetBatchTickers(ctx context.Context, in *BatchTickerRequest, opts ...grpc.CallOption) (*BatchTickerResponse, error)
	// Stream tickers in real-time
	StreamTickers(ctx context.Context, in *StreamTickerRequest, opts ...grpc.CallOption) (TickerService_StreamTickersClient, error)
	// Health check
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type tickerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerServiceClient(cc grpc.ClientConnInterface) TickerServiceClient {
	return &tickerServiceClient{cc}
}

func (c *tickerServiceClient) GetTicker(ctx context.Context, in *GetTickerRequest, opts ...grpc.CallOption) (*TickerData, error) {
	out := new(TickerData)
	err := c.cc.Invoke(ctx, TickerService_GetTicker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerServiceClient) GetBatchTickers(ctx context.Context, in *BatchTickerRequest, opts ...grpc.CallOption) (*BatchTickerResponse, error) {
	out := new(BatchTickerResponse)
	err := c.cc.Invoke(ctx, TickerService_GetBatchTickers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerServiceClient) StreamTickers(ctx context.Context, in *StreamTickerRequest, opts ...grpc.CallOption) (TickerService_StreamTickersClient, error) {
	stream, err := c.cc.NewStream(ctx, &TickerService_ServiceDesc.Streams[0], TickerService_StreamTickers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tickerServiceStreamTickersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TickerService_StreamTickersClient interface {
	Recv() (*TickerData, error)
	grpc.ClientStream
}

type tickerServiceStreamTickersClient struct {
	grpc.ClientStream
}

func (x *tickerServiceStreamTickersClient) Recv() (*TickerData, error) {
	m := new(TickerData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tickerServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, TickerService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerServiceServer is the server API for TickerService service.
// All implementations must embed UnimplementedTickerServiceServer
// for forward compatibility
type TickerServiceServer interface {
	// Get single ticker
	GetTicker(context.Context, *GetTickerRequest) (*TickerData, error)
	// Get multiple tickers in batch
	GetBatchTickers(context.Context, *BatchTickerRequest) (*BatchTickerResponse, error)
	// Stream tickers in real-time
	StreamTickers(*StreamTickerRequest, TickerService_StreamTickersServer) error
	// Health check
	HealthCheck(context.Context, *Empty) (*HealthResponse, error)
	mustEmbedUnimplementedTickerServiceServer()
}

// UnimplementedTickerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTickerServiceServer struct {
}

func (UnimplementedTickerServiceServer) GetTicker(context.Context, *GetTickerRequest) (*TickerData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicker not implemented")
}
func (UnimplementedTickerServiceServer) GetBatchTickers(context.Context, *BatchTickerRequest) (*BatchTickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchTickers not implemented")
}
func (UnimplementedTickerServiceServer) StreamTickers(*StreamTickerRequest, TickerService_StreamTickersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTickers not implemented")
}
func (UnimplementedTickerServiceServer) HealthCheck(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTickerServiceServer) mustEmbedUnimplementedTickerServiceServer() {}

// UnsafeTickerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerServiceServer will
// result in compilation errors.
type UnsafeTickerServiceServer interface {
	mustEmbedUnimplementedTickerServiceServer()
}

func RegisterTickerServiceServer(s grpc.ServiceRegistrar, srv TickerServiceServer) {
	s.RegisterService(&TickerService_ServiceDesc, srv)
}

func _TickerService_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServiceServer).GetTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickerService_GetTicker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServiceServer).GetTicker(ctx, req.(*GetTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickerService_GetBatchTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServiceServer).GetBatchTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickerService_GetBatchTickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServiceServer).GetBatchTickers(ctx, req.(*BatchTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickerService_StreamTickers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTickerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TickerServiceServer).StreamTickers(m, &tickerServiceStreamTickersServer{stream})
}

type TickerService_StreamTickersServer interface {
	Send(*TickerData) error
	grpc.ServerStream
}

type tickerServiceStreamTickersServer struct {
	grpc.ServerStream
}

func (x *tickerServiceStreamTickersServer) Send(m *TickerData) error {
	return x.ServerStream.SendMsg(m)
}

func _TickerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TickerService_ServiceDesc is the grpc.ServiceDesc for TickerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticker.TickerService",
	HandlerType: (*TickerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicker",
			Handler:    _TickerService_GetTicker_Handler,
		},
		{
			MethodName: "GetBatchTickers",
			Handler:    _TickerService_GetBatchTickers_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _TickerService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTickers",
			Handler:       _TickerService_StreamTickers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ticker.proto",
}
